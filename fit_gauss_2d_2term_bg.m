function [fitresult, gof] = fit_gauss_2d_2term_bg(gfp, wavelength_nm, na, pixel_size_nm, start_sigma_fold, max_sigma_fold, int_fold)
%CREATEFIT(X,Y,GFP)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : x
%      Y Input : y
%      Z Output: gfp
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 16-Apr-2021 10:56:43

%   inputs:
%       gfp : A 2D matrix of intensity values. Typically generated from
%       calling im_read on a single plane image or 3D projection.
%
%       pixel_size_nm : A scalar variable specifying the pixel size in
%       nanometers, i.e. 64.
%
%       wavelength_nm : A scalar variable specifying the wavelength of the
%       emission filter, i.e 510 nm.
%
%       na : A scalar variable specifying the numerical aperature of the
%       objective, i.e 1.45
%
%       start_sigma_fold : A scalar variable specifying the size of the
%       starting simga fit values relative to the min_simga size, i.e. 2.
%
%       max_sigma_fold : A scalar variable specifying the size of the
%       max sigma fit values relative to the min_simga size, i.e. 4
%
%       int_folder : A scalar variable specifying the size of the peak and
%       background intensities realative the max and min intensity values,
%       respectively, i.e. 10

%% Fit: 'untitled fit 1'.
x = size(gfp, 2);
y = size(gfp, 1);
[xData, yData, zData] = prepareSurfaceData( 1:x, 1:y, gfp );

% Set up fittype and options.
ft = fittype( 'a1*exp(-((x-mu1_x)^2/(2*sig1_x^2) + (y-mu1_y)^2/(2*sig1_y^2))) + a2*exp(-((x-mu2_x)^2/(2*sig2_x^2) + (y-mu2_y)^2/(2*sig2_y^2))) + bg;', 'independent', {'x', 'y'}, 'dependent', 'z' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
airy_disk_radius = 0.61 * (wavelength_nm/na); %Source: SVI Airy Disk Google
airy_disk_diameter = 2*airy_disk_radius;
min_sigma_nm = airy_disk_diameter/6;
min_sigma = min_sigma_nm/pixel_size_nm;
opts.Lower = [0, 0, 0, 0, 0, 0, 0, min_sigma, min_sigma, min_sigma, min_sigma];
start_sigma = min_sigma * start_sigma_fold;
opts.StartPoint = [...
    max(gfp(:)), ... %a1
    max(gfp(:)), ... %a1
    min(gfp(:)), ... %bg
    x/2, ... %mu1_x
    y/2, ...%mu1_y
    x/2, ... %mu2_x
    y/2, ... %mu2_y
    start_sigma, ... %sig1_x
    start_sigma, ... %sig1_y
    start_sigma, ... %sig2_x
    start_sigma, ... %sig2_y
    ];
max_sigma = min_sigma * max_sigma_fold;
opts.Upper = [...
    max(gfp(:)) * int_fold, ... %a1
    max(gfp(:)) * int_fold, ... %a2
    min(gfp(:)) * int_fold, ... %bg
    x, ... %mu1_x
    y, ... %mu1_y
    x, ... %mu2_x
    y, ... %mu2_y
    max_sigma, ... %sig1_x
    max_sigma, ... %sig1_y
    max_sigma, ... %sig2_x
    max_sigma ... %sig2_y
    ];

% Fit model to data.
[fitresult, gof] = fit( [xData, yData], zData, ft, opts );

% Plot fit with data.
figure( 'Name', 'untitled fit 1' );
h = plot( fitresult, [xData, yData], zData );
legend( h, 'untitled fit 1', 'gfp vs. x, y', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'x', 'Interpreter', 'none' );
ylabel( 'y', 'Interpreter', 'none' );
zlabel( 'Intensity (AU)', 'Interpreter', 'none' );
grid on
view( -136.9, 35.1 );


